name: Main pipeline

on:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: getsentry/action-github-app-token@v2.0.0
        id: generate-token
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_KEY }}
      - uses: actions/checkout@v3
        with:
          token: ${{ steps.generate-token.outputs.token }}
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: pip install pre-commit
      - run: pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: getsentry/action-github-app-token@v2.0.0
        id: generate-token
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_KEY }}
      - uses: actions/checkout@v3
        with:
          token: ${{ steps.generate-token.outputs.token }}
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: pip install poetry
      - run: poetry export -f requirements.txt --output requirements.txt --without-hashes
      - run: poetry run pip install -r requirements.txt
      - run: poetry install
      - run: poetry run coverage run -m pytest -v
      - run: poetry run coverage report -m --fail-under 100

  build:
    runs-on: ubuntu-latest
    needs: [pre-commit, test]
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: minecraft-copilot-ml
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
